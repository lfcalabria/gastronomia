# Generated by Django 4.2.13 on 2024-05-19 11:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('data', models.DateField(db_comment='Data da aula')),
                ('turno', models.CharField(choices=[('M', 'Manhã'), ('T', 'Tarde'), ('V', 'Vespertino'), ('N', 'Noite'), ('I', 'Integral')], db_comment='Turno da aula', max_length=1)),
                ('qtd_aluno', models.IntegerField(db_comment='Número de alunos previsto')),
            ],
            options={
                'verbose_name': 'Aula',
                'verbose_name_plural': 'Aulas',
                'db_table': 'aula',
            },
        ),
        migrations.CreateModel(
            name='AulaReceita',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('qtd_receita', models.IntegerField(db_comment='Quantidade de receitas previstas para a aula')),
            ],
            options={
                'verbose_name': 'Receita da Aula',
                'verbose_name_plural': 'Receitas das Aulas',
                'db_table': 'aulareceita',
            },
        ),
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('nome', models.CharField(db_comment='Nome da disciplina', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Disciplina',
                'verbose_name_plural': '`Disciplinas`',
                'db_table': 'disciplina',
            },
        ),
        migrations.CreateModel(
            name='Fornecedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('nome', models.CharField(db_comment='Nome do fornecedor', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Fornecedor',
                'verbose_name_plural': '`Fornecedores`',
                'db_table': 'fornecedor',
            },
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('nome', models.CharField(db_comment='Nome do produto', max_length=100, unique=True)),
                ('quantidade', models.IntegerField(db_comment='Quantidade disponível', default=0)),
            ],
            options={
                'verbose_name': 'Produto',
                'verbose_name_plural': 'Produtos',
                'db_table': 'produto',
            },
        ),
        migrations.CreateModel(
            name='Receita',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('nome', models.CharField(db_comment='Nome do tipo de receita', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Receita',
                'verbose_name_plural': 'Receitas',
                'db_table': 'receita',
            },
        ),
        migrations.CreateModel(
            name='UnidadeMedida',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('sigla', models.CharField(db_comment='Sigla da unidade de medida', max_length=5, unique=True)),
                ('descricao', models.CharField(db_comment='Descrição da unidade de medida', max_length=100)),
            ],
            options={
                'verbose_name': 'Unidade de Medida',
                'verbose_name_plural': 'Unidades de Medida',
                'db_table': 'unidademedida',
                'indexes': [models.Index(fields=['sigla'], name='unidademedi_sigla_65c422_idx')],
            },
        ),
        migrations.CreateModel(
            name='TipoCulinaria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('nome', models.CharField(db_comment='Nome do tipo de culinária', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de Culinária',
                'verbose_name_plural': 'Turmas',
                'db_table': 'tipoculinaria',
                'indexes': [models.Index(fields=['nome'], name='tipoculinar_nome_c8e1f6_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReceitaIngrediente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('quantidade', models.DecimalField(db_comment='quantidade usada na receita por unidade de medida', decimal_places=2, max_digits=9)),
                ('id_produto', models.ForeignKey(db_comment='ligacao com a tabela de produto', on_delete=django.db.models.deletion.RESTRICT, to='apis.produto')),
                ('id_receita', models.ForeignKey(db_comment='ligacao com a tabela de receita', on_delete=django.db.models.deletion.RESTRICT, to='apis.receita')),
            ],
            options={
                'verbose_name': 'Ingrediente da Receita',
                'verbose_name_plural': 'Ingredientes da Receita',
                'db_table': 'receitaingrediente',
            },
        ),
        migrations.AddField(
            model_name='receita',
            name='id_tipo',
            field=models.ForeignKey(db_comment='ligacao com a tabela de tipo de culinaria', on_delete=django.db.models.deletion.RESTRICT, to='apis.tipoculinaria'),
        ),
        migrations.AddField(
            model_name='receita',
            name='ingredientes',
            field=models.ManyToManyField(through='apis.ReceitaIngrediente', to='apis.produto'),
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('nome', models.CharField(db_comment='Nome do professor', max_length=100)),
            ],
            options={
                'verbose_name': 'Professor',
                'verbose_name_plural': '`Professores`',
                'db_table': 'professor',
                'indexes': [models.Index(fields=['nome'], name='professor_nome_e930d3_idx')],
            },
        ),
        migrations.AddField(
            model_name='produto',
            name='id_unidade',
            field=models.ForeignKey(db_comment='ligação com tabela de unidade de medida', on_delete=django.db.models.deletion.RESTRICT, to='apis.unidademedida'),
        ),
        migrations.AddField(
            model_name='produto',
            name='receitas',
            field=models.ManyToManyField(through='apis.ReceitaIngrediente', to='apis.receita'),
        ),
        migrations.CreateModel(
            name='Preco',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('data_cotacao', models.DateField(db_comment='Data Cotação', unique=True)),
                ('valor', models.DecimalField(db_comment='Valor cotado por unidade de medida', decimal_places=2, max_digits=9)),
                ('id_produto', models.ForeignKey(db_comment='ligação com tabela de produto', on_delete=django.db.models.deletion.RESTRICT, to='apis.produto')),
            ],
            options={
                'verbose_name': 'Preço',
                'verbose_name_plural': 'Preços',
                'db_table': 'preco',
            },
        ),
        migrations.CreateModel(
            name='NotaFiscal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('data_emissao', models.DateField(db_comment='Data de emissão da nota fiscal')),
                ('valor', models.DecimalField(db_comment='Valor total da nota fiscal', decimal_places=2, max_digits=9)),
                ('id_fornecedor', models.ForeignKey(db_comment='ligacao com a tabela de fornecedor', on_delete=django.db.models.deletion.RESTRICT, to='apis.fornecedor')),
            ],
            options={
                'verbose_name': 'Nota Fiscal',
                'verbose_name_plural': 'Notas Fiscais',
                'db_table': 'notafiscal',
            },
        ),
        migrations.CreateModel(
            name='Movimento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('tipo', models.CharField(choices=[('E', 'Entrada'), ('S', 'Saída'), ('A', 'Ajuste de auditoria')], db_comment='Tipo do movimento', max_length=1)),
                ('quantidade', models.IntegerField(db_comment='Quantidade movimentada')),
                ('id_produto', models.ForeignKey(db_comment='Ligação com a tabela de produto', on_delete=django.db.models.deletion.RESTRICT, to='apis.produto')),
            ],
            options={
                'verbose_name': 'Movimento',
                'verbose_name_plural': 'Movimentos',
                'db_table': 'movimento',
            },
        ),
        migrations.CreateModel(
            name='Laboratorio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('nome', models.CharField(db_comment='Nome do laboratório', max_length=100, unique=True)),
                ('localizacao', models.CharField(db_comment='Localização do laboratório', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Laboratório',
                'verbose_name_plural': 'Laboratórios',
                'db_table': 'laboratorio',
                'indexes': [models.Index(fields=['nome'], name='laboratorio_nome_89a47b_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='fornecedor',
            index=models.Index(fields=['nome'], name='fornecedor_nome_aaa24a_idx'),
        ),
        migrations.AddIndex(
            model_name='disciplina',
            index=models.Index(fields=['nome'], name='disciplina_nome_0178e1_idx'),
        ),
        migrations.AddField(
            model_name='aulareceita',
            name='id_aula',
            field=models.ForeignKey(db_comment='Ligação com a tabela de aula', on_delete=django.db.models.deletion.RESTRICT, to='apis.aula'),
        ),
        migrations.AddField(
            model_name='aulareceita',
            name='id_receita',
            field=models.ForeignKey(db_comment='Ligação com a tabela de receita', on_delete=django.db.models.deletion.RESTRICT, to='apis.receita'),
        ),
        migrations.AddField(
            model_name='aula',
            name='id_disciplina',
            field=models.ForeignKey(db_comment='Ligação com a tabela de disciplina', on_delete=django.db.models.deletion.RESTRICT, to='apis.disciplina'),
        ),
        migrations.AddField(
            model_name='aula',
            name='id_laboratorio',
            field=models.ForeignKey(db_comment='Ligação com a tabela de laboratorio', on_delete=django.db.models.deletion.RESTRICT, to='apis.laboratorio'),
        ),
        migrations.AddField(
            model_name='aula',
            name='id_professor',
            field=models.ForeignKey(db_comment='Ligação com a tabela de professor', on_delete=django.db.models.deletion.RESTRICT, to='apis.professor'),
        ),
        migrations.AddField(
            model_name='aula',
            name='receitas',
            field=models.ManyToManyField(through='apis.AulaReceita', to='apis.receita'),
        ),
        migrations.AddIndex(
            model_name='receitaingrediente',
            index=models.Index(fields=['id_receita'], name='receitaingr_id_rece_0d9237_idx'),
        ),
        migrations.AddIndex(
            model_name='receitaingrediente',
            index=models.Index(fields=['id_produto'], name='receitaingr_id_prod_cd6204_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='receitaingrediente',
            unique_together={('id_receita', 'id_produto')},
        ),
        migrations.AddIndex(
            model_name='receita',
            index=models.Index(fields=['nome'], name='receita_nome_49d64e_idx'),
        ),
        migrations.AddIndex(
            model_name='receita',
            index=models.Index(fields=['id_tipo'], name='receita_id_tipo_796be7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='receita',
            unique_together={('nome', 'id_tipo')},
        ),
        migrations.AddIndex(
            model_name='produto',
            index=models.Index(fields=['nome'], name='produto_nome_6bd8e8_idx'),
        ),
        migrations.AddIndex(
            model_name='produto',
            index=models.Index(fields=['id_unidade'], name='produto_id_unid_f91538_idx'),
        ),
        migrations.AddIndex(
            model_name='preco',
            index=models.Index(fields=['id_produto'], name='preco_id_prod_4f2855_idx'),
        ),
        migrations.AddIndex(
            model_name='notafiscal',
            index=models.Index(fields=['id_fornecedor'], name='notafiscal_id_forn_b1ee8f_idx'),
        ),
        migrations.AddIndex(
            model_name='movimento',
            index=models.Index(fields=['id_produto'], name='movimento_id_prod_ffa5ca_idx'),
        ),
        migrations.AddIndex(
            model_name='aulareceita',
            index=models.Index(fields=['id_aula'], name='aulareceita_id_aula_0fae42_idx'),
        ),
        migrations.AddIndex(
            model_name='aulareceita',
            index=models.Index(fields=['id_receita'], name='aulareceita_id_rece_49e68f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aulareceita',
            unique_together={('id_aula', 'id_receita')},
        ),
        migrations.AddIndex(
            model_name='aula',
            index=models.Index(fields=['id_disciplina'], name='aula_id_disc_ae61da_idx'),
        ),
        migrations.AddIndex(
            model_name='aula',
            index=models.Index(fields=['id_professor'], name='aula_id_prof_e9ec00_idx'),
        ),
        migrations.AddIndex(
            model_name='aula',
            index=models.Index(fields=['id_laboratorio'], name='aula_id_labo_8a601b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aula',
            unique_together={('data', 'turno', 'id_professor')},
        ),
    ]
